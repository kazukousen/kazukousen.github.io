<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>メモとかいろいろ - Memo</title><link href="https://kazukousen.github.io/" rel="alternate"></link><link href="https://kazukousen.github.io/feeds/memo.atom.xml" rel="self"></link><id>https://kazukousen.github.io/</id><updated>2017-02-11T11:45:00+09:00</updated><entry><title>PelicanとGitHub-pagesでブログ開設</title><link href="https://kazukousen.github.io/python-pelican-install.html" rel="alternate"></link><published>2017-02-11T00:00:00+09:00</published><updated>2017-02-11T11:45:00+09:00</updated><author><name>one_meets_seven</name></author><id>tag:kazukousen.github.io,2017-02-11:/python-pelican-install.html</id><summary type="html">&lt;p&gt;Python3系の環境構築をまとめた. 静的サイトジェネレータPelicanでGitHub-pagesデビューした.&lt;/p&gt;</summary><content type="html">&lt;h1&gt;PelicanとGitHub-pagesでブログ開設&lt;/h1&gt;
&lt;p&gt;GitHub-pagesを使ってみたかった&lt;br&gt;
HTML5, CSS, JavaScriptが動くということで静的サイトジェネレータを使うことにした  &lt;/p&gt;
&lt;p&gt;どうせならPython製の&lt;a href="http://docs.getpelican.com/en/stable/"&gt;Pelican&lt;/a&gt;
Markdownでモダンな静的サイトでも作ることにした  &lt;/p&gt;
&lt;h2&gt;GitHub Pages&lt;/h2&gt;
&lt;p&gt;まずは自分のGitHubアカウントで&lt;br&gt;
&lt;code&gt;Repository name&lt;/code&gt;に&lt;code&gt;username.github.io&lt;/code&gt;と入力して新規作成&lt;br&gt;
つくったらとりあえず今は放っておく  &lt;/p&gt;
&lt;h2&gt;pythonで環境構築&lt;/h2&gt;
&lt;p&gt;怖がる必要はない. python3系を構築しましょう.  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;pyenvでバージョン管理&lt;/li&gt;
&lt;li&gt;virtualenvでプロジェクト管理&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;の手段をとる.  &lt;/p&gt;
&lt;h3&gt;pythonにおけるプロジェクト管理&lt;/h3&gt;
&lt;p&gt;プロジェクトディレクトリを作ってその中にvirtualenvの環境づくり.&lt;br&gt;
virtualenvはpipでインストールすればいいらしい.&lt;br&gt;
python3系にはvenvがあるらしいが結局みんなvirtualenvにお世話になってるぽい.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install virtualenv
$ &lt;span class="nb"&gt;cd&lt;/span&gt; ~
$ mkdir Blog &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; Blog
$ virtualenv venv
$ &lt;span class="nb"&gt;source&lt;/span&gt; venv/bin/activate
&lt;span class="o"&gt;(&lt;/span&gt;venv&lt;span class="o"&gt;)&lt;/span&gt;$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;venv&lt;/code&gt;という名前で環境を管理する.&lt;br&gt;
activateを実行で&lt;code&gt;venv&lt;/code&gt;環境に入る.&lt;br&gt;
抜ける時は  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;venv&lt;span class="o"&gt;)&lt;/span&gt;$ deactivate
$
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;作った環境でモジュールたちをpipでインストールしまくっても&lt;br&gt;
グローバル環境が汚れずに済む.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ここから先は(venv)と明記しない.&lt;/strong&gt;  &lt;/p&gt;
&lt;h2&gt;pelican&lt;/h2&gt;
&lt;p&gt;以下をpipで一気にインストール.&lt;br&gt;
&lt;code&gt;requirements.txt&lt;/code&gt;  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;% requirements.txt
pelican
Markdown
ghp-import
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;ghp-import&lt;/code&gt;はGitHub-Pagesリポジトリへの遠隔操作をいい感じに楽にしてくれる.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install -r requirements.txt
$ pip list
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;pelican-quickstart&lt;/code&gt;コマンドでpelicanの雛形をつくる.&lt;br&gt;
いろいろ対話形式で設定をすることになる.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; Where &lt;span class="k"&gt;do&lt;/span&gt; you want to create your new web site? &lt;span class="o"&gt;[&lt;/span&gt;.&lt;span class="o"&gt;]&lt;/span&gt; .
&amp;gt; What will be the title of this web site? your blog
e Who will be the author of this web site? yourname
&amp;gt; What will be the default language of this web site? &lt;span class="o"&gt;[&lt;/span&gt;en&lt;span class="o"&gt;]&lt;/span&gt; ja
&amp;gt; TimeZone的なこと &lt;span class="o"&gt;[&lt;/span&gt;Europe/Paris&lt;span class="o"&gt;]&lt;/span&gt; Asia/Tokyo
&amp;gt; Do you want to specify a URL prefix? e.g., http://example.com   &lt;span class="o"&gt;(&lt;/span&gt;Y/n&lt;span class="o"&gt;)&lt;/span&gt; Y
&amp;gt; What is your URL prefix? &lt;span class="o"&gt;(&lt;/span&gt;see above example&lt;span class="p"&gt;;&lt;/span&gt; no trailing slash&lt;span class="o"&gt;)&lt;/span&gt; https://yourname.github.io
&amp;gt; Do you want to &lt;span class="nb"&gt;enable&lt;/span&gt; article pagination? &lt;span class="o"&gt;(&lt;/span&gt;Y/n&lt;span class="o"&gt;)&lt;/span&gt; Y
&amp;gt; How many articles per page &lt;span class="k"&gt;do&lt;/span&gt; you want? &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;
&amp;gt; Do you want to generate a Fabfile/Makefile to automate generation and publishing? &lt;span class="o"&gt;(&lt;/span&gt;Y/n&lt;span class="o"&gt;)&lt;/span&gt; Y
&amp;gt; Do you want an auto-reload &lt;span class="p"&gt;&amp;amp;&lt;/span&gt; simpleHTTP script to assist with theme and site development? &lt;span class="o"&gt;(&lt;/span&gt;Y/n&lt;span class="o"&gt;)&lt;/span&gt; Y
&amp;gt; Do you want to upload your website using FTP? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt; N
&amp;gt; Do you want to upload your website using SSH? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt; N
&amp;gt; Do you want to upload your website using Dropbox? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt; N
&amp;gt; Do you want to upload your website using S3? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt; N
&amp;gt; Do you want to upload your website using Rackspace Cloud Files? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt; N
&amp;gt; Do you want to upload your website using GitHub Pages? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt; y
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Markdown&lt;/h2&gt;
&lt;p&gt;早速記事を書いてみる.&lt;br&gt;
&lt;code&gt;content&lt;/code&gt;ディレクトリ下にmdファイルを作る  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;% 0210first_post.md
Title: ブログタイトル
Date: 2017-02-10 23:00
Category:   Memo
Tags: pelican, python
Slug: 0210first_post
Author: yourname
Summary: ブログの要約


&lt;span class="gh"&gt;#&lt;/span&gt; ブログのタイトル 

&lt;span class="k"&gt;-&lt;/span&gt; List
&lt;span class="k"&gt;-&lt;/span&gt; List
&lt;span class="k"&gt;-&lt;/span&gt; List

&lt;span class="s"&gt;```python&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Hello World!&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="s"&gt;```&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;make html&lt;/code&gt;でHTMLにコンパイルし&lt;code&gt;make serve&lt;/code&gt;でローカル環境で確認.&lt;br&gt;
HTMLは&lt;code&gt;output&lt;/code&gt;ディレクトリの中に作成される.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ make html
$ make serve
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;http://localhost:8000&lt;/code&gt;にアクセス  &lt;/p&gt;
&lt;h2&gt;GitHub PagesにPush&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git init
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;.gitignore&lt;/code&gt;でpushを除外するファイルを記述する.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;## Pelican&lt;/span&gt;
&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="o"&gt;/*&lt;/span&gt;
&lt;span class="o"&gt;*.&lt;/span&gt;&lt;span class="n"&gt;pid&lt;/span&gt;

&lt;span class="c1"&gt;## Python&lt;/span&gt;
&lt;span class="o"&gt;*.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;cod&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;## Mac OS X&lt;/span&gt;
&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DS_Store&lt;/span&gt;
&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n n-Operator"&gt;*&lt;/span&gt;&lt;span class="o"&gt;~&lt;/span&gt;
&lt;span class="o"&gt;*~&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;push  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ghp-import output
$ git push https://github.com/yourname/yourname.github.io.git gh-pages:master
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;https://yourname.github.io&lt;/code&gt;に反映されるはず.&lt;br&gt;
(少しラグあり)  &lt;/p&gt;
&lt;h2&gt;おまけメモ&lt;/h2&gt;
&lt;h3&gt;テーマ変更&lt;/h3&gt;
&lt;p&gt;テーマを変更してみる.&lt;br&gt;
&lt;a href="http://www.pelicanthemes.com"&gt;Pelican Themes&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ mkdir themes &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; themes
$ git clone https://github.com/gilsondev/pelican-clean-blog
$ &lt;span class="nb"&gt;cd&lt;/span&gt; ..
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;テーマを導入  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pelican-themes -i themes/pelican-clean-blog
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;入ったか確認  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pelican-themes -l
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;設定ファイル&lt;code&gt;pelicanconf.py&lt;/code&gt;に以下を追加.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;THEME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pelican-clean-blog&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;プラグインを導入&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ mkdir plugins &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; plugins
$ git clone https://github.com/getpelican/pelican-plugins.git
$ &lt;span class="nb"&gt;cd&lt;/span&gt; ..
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;MathJax&lt;/h4&gt;
&lt;p&gt;LaTeXみたいな数式を書きたい&lt;br&gt;
依存モジュールをインストール  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install typogrify
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;pelicanconf.py&lt;/code&gt;を書き換える.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;PLUGINS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;render_math&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;これで使えるようになる.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$$
{\mathcal L}(x) = -{\rm KL}[q(z|x)||p(z)] + {\mathbb E}_{q(z|x)}[p(x|z)]
$$
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="math"&gt;$$
{\mathcal L}(x) = -{\rm KL}[q(z|x)||p(z)] + {\mathbb E}_{q(z|x)}[p(x|z)]
$$&lt;/div&gt;
&lt;h4&gt;Jupyter Notebook&lt;/h4&gt;
&lt;p&gt;なんとJupyterのセルも貼り付けるプラグインがある&lt;br&gt;
依存モジュールをインストール  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install ipython jupyter
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;つぎに&lt;code&gt;pelicanconf.py&lt;/code&gt;を書き加える  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;PLUGINS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;liquid_tags.notebook&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;render_math&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;NOTEBOOK_DIR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;notebooks&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{% notebook yourfilename.ipynb cells[0:12] %}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;指定したcellの分だけ表示できる.  &lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    var location_protocol = (false) ? 'https' : document.location.protocol;
    if (location_protocol !== 'http' &amp;&amp; location_protocol !== 'https') location_protocol = 'https:';
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = location_protocol + '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="pelican"></category><category term="GitHub"></category><category term="python"></category></entry></feed>